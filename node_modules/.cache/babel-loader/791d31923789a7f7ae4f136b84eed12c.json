{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nconst mock = new MockAdapter(axios, {\n  delayResponse: 1500\n});\nconst user = {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n};\nconst users = [{\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}];\nmock.onPost('/auth/login').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REF'\n});\nmock.onPost('/auth/register').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/refresh').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC2',\n  refreshToken: 'TOKEN_REs2'\n});\nmock.onGet('/users').reply(200, {\n  users\n});\nmock.resetHistory();\n/**\n * response на логин token & refreshToken\n */\n\nclass Api {\n  constructor(options = {}) {\n    this.client = options.client || axios.create();\n    this.token = '';\n    this.refreshToken = '';\n    this.refreshRequest = null;\n    this.client.interceptors.request.use(config => {\n      if (!this.token) {\n        return config;\n      }\n\n      const newConfig = { ...config\n      };\n      newConfig.headers['Authorization'] = `Bearer ${this.token}`;\n      return newConfig;\n    }, e => Promise.reject(e)); // this.client.interceptors.response.use(\n    //     r => r,\n    //     async error => {\n    //         this.refreshToken = localStorage.getItem('refresh_token')\n    //         if (\n    //             !this.refreshToken ||\n    //             error.response.status !== 401 ||\n    //             error.config.retry\n    //         ) {\n    //             await Promise.reject(error);\n    //         }\n    //\n    //         if (!this.refreshRequest) {\n    //             this.refreshRequest = this.client.post(\"/auth/refresh\", {\n    //                 refreshToken: this.refreshToken,\n    //             });\n    //             console.log(this.refreshRequest)\n    //         }\n    //         const { data } = await this.refreshRequest;\n    //         this.token = data.token;\n    //         localStorage.setItem('refresh_token',data.refreshToken)\n    //         this.refreshToken = data.refreshToken;\n    //         const newRequest = {\n    //             ...error.config,\n    //             retry: true,\n    //         };\n    //\n    //         return this.client(newRequest);\n    //     }\n    // )\n  }\n\n  setToken(some) {\n    this.token = some;\n  }\n\n  getToken() {\n    return this.token;\n  }\n\n  async login({\n    login,\n    password\n  }) {\n    const res = await this.client.post(\"/auth/login\", {\n      login,\n      password\n    }).then(r => r).catch(er => Promise.reject(er));\n    console.log('вызван логин ');\n    this.setToken(await res.data.accessToken);\n    console.log('после логина получен токен', this.getToken());\n    localStorage.setItem('refresh_token', await res.data.refreshToken);\n    this.refreshToken = localStorage.getItem('refresh_token');\n    return res;\n  }\n\n  async autoLog() {\n    const refToken = localStorage.getItem('refresh_token');\n\n    if (refToken) {\n      return this.client.post('/auth/refresh', {\n        refreshToken: refToken\n      }).then(r => {\n        this.setToken(r.data.accessToken);\n        localStorage.removeItem('refresh_token');\n        localStorage.setItem('refresh_token', ref.data.refreshToken);\n        return ref.data.user;\n      });\n    }\n  }\n\n  logout() {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('refresh_token');\n  }\n\n  async register(data = {}) {\n    return await this.client.post('/auth/register', data);\n  }\n\n  async getUsers() {\n    // console.log(this.getToken());\n    // let token = this.getToken();\n    return await this.client.get(\"/users\").then(data => data);\n  }\n\n}\n\nexport default new Api();","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/exampleApi/APIJWT.js"],"names":["axios","MockAdapter","mock","delayResponse","user","surName","name","patronymic","birthDay","phone","email","users","onPost","reply","accessToken","refreshToken","success","onGet","resetHistory","Api","constructor","options","client","create","token","refreshRequest","interceptors","request","use","config","newConfig","headers","e","Promise","reject","setToken","some","getToken","login","password","res","post","then","r","catch","er","console","log","data","localStorage","setItem","getItem","autoLog","refToken","removeItem","ref","logout","register","getUsers","get"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\n\nconst mock = new MockAdapter(axios,{delayResponse:1500});\n\nconst user = {\n    surName:'Mr.',\n    name:'FabiozZz',\n    patronymic:'Loucoster',\n    birthDay: '20/10/1989',\n    phone: '+79996569772',\n    email: 'fabiozzz.dev@gmail.com',\n}\nconst users=[\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n]\nmock.onPost('/auth/login').reply(200, {user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REF'});\nmock.onPost('/auth/register').reply(200, {success: 'Ok'});\n\nmock.onPost('/auth/refresh').reply(200,{user,accessToken: 'TOKEN_ACC2',refreshToken:'TOKEN_REs2'});\n\nmock.onGet('/users').reply(200, {users});\nmock.resetHistory();\n\n/**\n * response на логин token & refreshToken\n */\n\nclass Api {\n\n    constructor(options = {}) {\n        this.client = options.client || axios.create();\n        this.token = '';\n        this.refreshToken = '';\n\n        this.refreshRequest = null;\n\n        this.client.interceptors.request.use(\n            config => {\n                if (!this.token) {\n                    return config;\n                }\n                const newConfig = {\n                    ...config,\n                };\n\n                newConfig.headers.['Authorization'] = `Bearer ${this.token}`;\n                return newConfig;\n            },\n            e => Promise.reject(e)\n        );\n\n        // this.client.interceptors.response.use(\n        //     r => r,\n        //     async error => {\n        //         this.refreshToken = localStorage.getItem('refresh_token')\n        //         if (\n        //             !this.refreshToken ||\n        //             error.response.status !== 401 ||\n        //             error.config.retry\n        //         ) {\n        //             await Promise.reject(error);\n        //         }\n        //\n        //         if (!this.refreshRequest) {\n        //             this.refreshRequest = this.client.post(\"/auth/refresh\", {\n        //                 refreshToken: this.refreshToken,\n        //             });\n        //             console.log(this.refreshRequest)\n        //         }\n        //         const { data } = await this.refreshRequest;\n        //         this.token = data.token;\n        //         localStorage.setItem('refresh_token',data.refreshToken)\n        //         this.refreshToken = data.refreshToken;\n        //         const newRequest = {\n        //             ...error.config,\n        //             retry: true,\n        //         };\n        //\n        //         return this.client(newRequest);\n        //     }\n        // )\n    }\n\n    setToken(some) {\n        this.token = some;\n    }\n\n    getToken() {\n        return this.token;\n    }\n\n    async login({ login, password }) {\n        const res = await this.client.post(\"/auth/login\", {\n            login,\n            password\n        }).then(r => r).catch(er => Promise.reject(er));\n        console.log('вызван логин ')\n        this.setToken(await res.data.accessToken);\n        console.log('после логина получен токен', this.getToken());\n        localStorage.setItem('refresh_token',await res.data.refreshToken)\n        this.refreshToken = localStorage.getItem('refresh_token');\n        return res\n    }\n\n    async autoLog() {\n        const refToken = localStorage.getItem('refresh_token');\n        if (refToken) {\n            return this.client.post('/auth/refresh', {refreshToken: refToken}).then(r=> {\n                this.setToken(r.data.accessToken);\n                localStorage.removeItem('refresh_token');\n                localStorage.setItem('refresh_token', ref.data.refreshToken);\n                return ref.data.user\n\n            });\n        }\n    }\n\n    logout() {\n        this.token = null;\n        this.refreshToken = null;\n        localStorage.removeItem('refresh_token')\n    }\n\n    async register(data={}) {\n        return await this.client.post('/auth/register', data)\n    }\n\n    async getUsers() {\n        // console.log(this.getToken());\n        // let token = this.getToken();\n        return await this.client.get(\"/users\").then((data) => data)\n    }\n}\n\nexport default new Api();\n"]},"metadata":{},"sourceType":"module"}