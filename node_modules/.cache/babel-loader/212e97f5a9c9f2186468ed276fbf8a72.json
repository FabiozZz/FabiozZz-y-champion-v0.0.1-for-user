{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nconst mock = new MockAdapter(axios, {\n  delayResponse: 3000\n});\nconst user = {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n};\nmock.onPost('/auth/login').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC'\n});\nmock.onPost('/auth/register').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/refresh').reply(200, {\n  user\n});\nmock.onGet('/auth/refresh').reply(200, {\n  user\n});\n/**\n * response на логин token & refreshToken\n */\n\nexport default class APIJWT {\n  constructor(options = {}) {\n    this.client = axios.create();\n    this.client.interceptors.request.use(config => {\n      if (!localStorage.getItem('token')) {\n        return config;\n      }\n\n      const newConfig = {\n        headers: {},\n        ...config\n      };\n      newConfig.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\n      return newConfig;\n    }, error => Promise.reject(error));\n  }\n\n  async register(data) {\n    return await this.client.post('/auth/register', data).then(res => res);\n  }\n\n  async login({\n    login,\n    password\n  }) {\n    return await this.client.post('/auth/login', {\n      login,\n      password\n    }).then(res => {\n      console.log(res);\n      localStorage.setItem('token', res.data.accessToken);\n      return res.data.user;\n    });\n  }\n\n  async getProtected() {\n    return await this.client.get('/auth/refresh').then(res => {\n      return res.user;\n    });\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  getUsers() {\n    return this.client.get('/users').then(({\n      data\n    }) => data);\n  }\n\n}","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/exampleApi/APIJWT.js"],"names":["axios","MockAdapter","mock","delayResponse","user","fullName","birthDay","phone","email","onPost","reply","accessToken","success","onGet","APIJWT","constructor","options","client","create","interceptors","request","use","config","localStorage","getItem","newConfig","headers","Authorization","error","Promise","reject","register","data","post","then","res","login","password","console","log","setItem","getProtected","get","logout","removeItem","getUsers"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\n\nconst mock = new MockAdapter(axios,{delayResponse:3000});\nconst user = {\n    fullName:'Mr. FabiozZz Loucoster',\n    birthDay: '20/10/1989',\n    phone: '+79996569772',\n    email: 'fabiozzz.dev@gmail.com',\n}\nmock.onPost('/auth/login').reply(200, {user,accessToken: 'TOKEN_ACC'});\nmock.onPost('/auth/register').reply(200, {success: 'Ok'});\nmock.onPost('/auth/refresh').reply(200,{user});\nmock.onGet('/auth/refresh').reply(200, {user});\n/**\n * response на логин token & refreshToken\n */\n\n\nexport default  class APIJWT {\n    constructor(options={}) {\n        this.client = axios.create();\n\n        this.client.interceptors.request.use(config=>{\n            if (!localStorage.getItem('token')) {\n                return config\n            }\n\n            const newConfig ={\n                headers:{},\n                ...config,\n            }\n            newConfig.headers.Authorization = `Bearer ${localStorage.getItem('token')}`\n            return newConfig\n\n        },error => Promise.reject(error))\n\n    }\n\n    async register(data) {\n        return await this.client.post('/auth/register',data).then(res=>res)\n    }\n\n    async login({login,password}) {\n        return  await this.client.post('/auth/login',{login,password}).then(res=>{\n            console.log(res)\n            localStorage.setItem('token', res.data.accessToken);\n            return res.data.user\n        })\n    }\n\n    async getProtected() {\n        return await this.client.get('/auth/refresh').then(res=>{\n            return res.user;\n        })\n    }\n    logout() {\n        localStorage.removeItem('token');\n    }\n\n    getUsers() {\n        return this.client.get('/users').then(({data}) => data);\n    }\n}"]},"metadata":{},"sourceType":"module"}