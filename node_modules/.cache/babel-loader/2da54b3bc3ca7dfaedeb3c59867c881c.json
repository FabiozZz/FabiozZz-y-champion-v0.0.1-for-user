{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport { useSelector } from \"react-redux\";\nconst mock = new MockAdapter(axios);\nconst user = {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n};\nconst users = [{\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}];\nmock.onPost('/auth/login').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REF'\n});\nmock.onPost('/auth/register').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/refresh').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REs'\n});\nmock.onGet('/users').reply(200, {\n  users\n});\nmock.resetHistory();\nexport const login = async data => {\n  const res = await this.client.post(\"/auth/login\", data);\n  console.log('вызван логин');\n  this.setToken(await res.data.accessToken);\n  console.log('после логина получен токен', this.getToken());\n  localStorage.setItem('refresh_token', await res.data.refreshToken);\n  this.refreshToken = localStorage.getItem('refresh_token');\n  return res;\n};\nexport const logout = () => {\n  this.token = null;\n  this.refreshToken = null;\n  localStorage.removeItem('refresh_token');\n};\nexport const register = async data => {\n  return await this.client.post('/auth/register', data);\n};\nexport const getUsers = async token => {\n  return await this.client.get(\"/users\", {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  }).then(data => data);\n};","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/actions/userActions.js"],"names":["axios","MockAdapter","useSelector","mock","user","fullName","birthDay","phone","email","users","onPost","reply","accessToken","refreshToken","success","onGet","resetHistory","login","data","res","client","post","console","log","setToken","getToken","localStorage","setItem","getItem","logout","token","removeItem","register","getUsers","get","headers","Authorization","then"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport {useSelector} from \"react-redux\";\n\nconst mock = new MockAdapter(axios);\nconst user = {\n    fullName:'Mr. FabiozZz Loucoster',\n    birthDay: '20/10/1989',\n    phone: '+79996569772',\n    email: 'fabiozzz.dev@gmail.com',\n}\nconst users=[\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n]\nmock.onPost('/auth/login').reply(200, {user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REF'});\nmock.onPost('/auth/register').reply(200, {success: 'Ok'});\n\nmock.onPost('/auth/refresh').reply(200,{user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REs'});\n\nmock.onGet('/users').reply(200, {users});\nmock.resetHistory();\n\n\nexport const login = async (data)=> {\n    const res = await this.client.post(\"/auth/login\", data);\n    console.log('вызван логин');\n    this.setToken(await res.data.accessToken);\n    console.log('после логина получен токен', this.getToken());\n    localStorage.setItem('refresh_token',await res.data.refreshToken)\n    this.refreshToken = localStorage.getItem('refresh_token');\n    return res\n}\n\nexport const logout =()=> {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('refresh_token')\n}\n\nexport const register = async (data)=> {\n    return await this.client.post('/auth/register', data)\n}\n\nexport const getUsers = async (token)=> {\n    return await this.client.get(\"/users\",{headers: {Authorization: 'Bearer '+ token}}).then((data) => data)\n}"]},"metadata":{},"sourceType":"module"}