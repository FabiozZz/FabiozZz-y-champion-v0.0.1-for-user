{"ast":null,"code":"var _jsxFileName = \"/home/fabiozzz/www/react/y-champion/for-user/src/compponents/auth/forgetPassword/forgetPassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './forget.css';\nimport { Steps } from \"../../../utils/steps/Steps\";\nimport { Input } from \"../../../utils/input/Input\";\nimport { useHistory } from \"react-router\";\nimport api from '../../../exampleApi/APIJWT';\nimport { toast, Toaster } from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ForgetPassword = () => {\n  _s();\n\n  const history = useHistory(); //блок для внутреннего стейта\n  //кнопка отправки паролей\n\n  const [disableFinish, setDisableFinish] = useState(true); //загрузка данных на сервер\n\n  const [isLoading, setIsLoading] = useState(false); //пользователь\n\n  const [email, setEmail] = useState('');\n  const [codeEmail, setCodeEmail] = useState('');\n  const [password, setPassword] = useState({\n    pass: '',\n    confPass: ''\n  }); //этапы восстановления - по умолчанию первый этап\n\n  const [step, setStep] = useState(1); //прослушивание событий ввода\n\n  const handleEmail = event => {\n    setEmail(event);\n  };\n\n  const handleCodeEmail = e => {\n    setCodeEmail(e);\n  };\n\n  const handlePass = e => {\n    setPassword(prevState => ({ ...prevState,\n      pass: e\n    }));\n  };\n\n  const handleConfPass = e => {\n    setPassword(prevState => ({ ...prevState,\n      confPass: e\n    }));\n  }; //прослушивает последний ввод пароля, если оба пороля совпадают (сам пароль и подтверддение пароля)\n  //то последняя кнопка разблокирывается иначе нет возмодности отправить форму\n\n\n  useEffect(() => {\n    if (password.pass === password.confPass) {\n      setDisableFinish(false);\n    } else {\n      setDisableFinish(true);\n    }\n  }, [password]); //прослушивание загрузки, пока идет загрузка внутреннее содержимое не доступно\n  //показывается индикатор того что идет загрузка\n\n  useEffect(() => {\n    if (isLoading) {\n      toast.loading();\n    } else {\n      toast.remove();\n    }\n  }, [isLoading]); //прослушивание каждого этапа, в зависимости от того какой этап, данные уходят на разные пути\n\n  const handleNextStep = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    setStep(prevState => prevState + 1);\n    let res = step === 1 ? await api.forgetEmail(email).then(r => {\n      setIsLoading(false);\n      return r;\n    }) : await api.forgetCode(codeEmail).then(r => {\n      setIsLoading(false);\n      return r;\n    });\n    console.log(res);\n  }; //прослушивание кнопки отмены (возврата на предидущий шаг)\n\n\n  const handlePrevStep = e => {\n    e.preventDefault();\n    setStep(prevState => prevState - 1);\n  }; //прослушивание финальной кнопки для отправки данных пользователя\n  //само восставновление пароля\n\n\n  const handleSubmitNewPass = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    const res = await api.forgeRefreshPass(password).then(r => {\n      setIsLoading(false);\n      history.push('/login');\n    });\n  }; //динамичная подмена данных для компонента Input в зависимости от этапа восстановления\n\n\n  const place = step === 1 ? 'Введите ваш Email ...' : step === 2 ? 'Введите пароль из письма на почте ...' : 'Создайте новый пароль';\n  const type = step === 1 ? 'email' : step === 2 ? 'text' : 'password';\n  const val = step === 1 ? email : step === 2 ? codeEmail : 'password';\n  const setVal = step === 1 ? handleEmail : handleCodeEmail;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Toaster, {\n      position: 'top-center',\n      toastOptions: {\n        style: {\n          margin: '40px',\n          background: '#363636',\n          color: '#fff',\n          zIndex: 1\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), !isLoading && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: 'auth',\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: place\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Steps, {\n        step: step\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), step < 3 ? /*#__PURE__*/_jsxDEV(Input, {\n        value: val,\n        setValue: setVal,\n        type: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: 'password',\n          value: password.pass,\n          placeholder: 'Введите новый пароль',\n          setValue: handlePass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: 'password',\n          value: password.confPass,\n          placeholder: 'Повторите новый пароль',\n          setValue: handleConfPass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevStep,\n        disabled: step <= 1,\n        className: 'auth__btn',\n        children: \"Prev Step\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), step < 3 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextStep,\n        className: 'auth__btn',\n        children: \"Next Step\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitNewPass,\n        disabled: disableFinish,\n        className: 'auth__btn',\n        children: \"Finish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ForgetPassword, \"+M0aX8sy/vBkSu+9HRTGGX7Vcus=\", false, function () {\n  return [useHistory];\n});\n\n_c = ForgetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgetPassword\");","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/compponents/auth/forgetPassword/forgetPassword.js"],"names":["React","useEffect","useState","Steps","Input","useHistory","api","toast","Toaster","ForgetPassword","history","disableFinish","setDisableFinish","isLoading","setIsLoading","email","setEmail","codeEmail","setCodeEmail","password","setPassword","pass","confPass","step","setStep","handleEmail","event","handleCodeEmail","e","handlePass","prevState","handleConfPass","loading","remove","handleNextStep","preventDefault","res","forgetEmail","then","r","forgetCode","console","log","handlePrevStep","handleSubmitNewPass","forgeRefreshPass","push","place","type","val","setVal","style","margin","background","color","zIndex"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './forget.css'\nimport {Steps} from \"../../../utils/steps/Steps\";\nimport {Input} from \"../../../utils/input/Input\";\nimport {useHistory} from \"react-router\";\nimport api from '../../../exampleApi/APIJWT';\nimport {toast, Toaster} from \"react-hot-toast\";\n\nexport const ForgetPassword = ()=> {\n    const history = useHistory();\n\n    //блок для внутреннего стейта\n\n    //кнопка отправки паролей\n    const [disableFinish,setDisableFinish] = useState(true);\n\n    //загрузка данных на сервер\n    const [isLoading,setIsLoading] = useState(false);\n\n    //пользователь\n    const [email,setEmail] = useState('');\n    const [codeEmail,setCodeEmail] = useState('');\n    const [password,setPassword] = useState({\n        pass:'',\n        confPass: '',\n    });\n\n    //этапы восстановления - по умолчанию первый этап\n    const [step,setStep] = useState(1);\n\n    //прослушивание событий ввода\n    const handleEmail = (event) => {\n        setEmail(event);\n    };\n    const handleCodeEmail = (e) => {\n        setCodeEmail(e);\n    };\n    const handlePass = (e)=>{\n        setPassword(prevState => ({\n            ...prevState,\n            pass: e\n        }))\n    }\n    const handleConfPass = (e)=>{\n        setPassword(prevState => ({\n            ...prevState,\n            confPass: e\n        }))\n    }\n\n    //прослушивает последний ввод пароля, если оба пороля совпадают (сам пароль и подтверддение пароля)\n    //то последняя кнопка разблокирывается иначе нет возмодности отправить форму\n    useEffect(() => {\n        if (password.pass === password.confPass) {\n            setDisableFinish(false)\n        }else{\n            setDisableFinish(true)\n        }\n    },[password]);\n\n    //прослушивание загрузки, пока идет загрузка внутреннее содержимое не доступно\n    //показывается индикатор того что идет загрузка\n    useEffect(() => {\n        if (isLoading) {\n            toast.loading();\n        }else{\n            toast.remove();\n        }\n    },[isLoading]);\n\n\n    //прослушивание каждого этапа, в зависимости от того какой этап, данные уходят на разные пути\n    const handleNextStep = async (e)=>{\n        e.preventDefault();\n        setIsLoading(true)\n        setStep(prevState => prevState + 1);\n        let res = step === 1 ? await api.forgetEmail(email).then(r => {\n                setIsLoading(false);\n                return r;\n            }) :\n            await api.forgetCode(codeEmail).then(r => {\n                setIsLoading(false);\n                return r;\n            });\n        console.log(res)\n    }\n\n    //прослушивание кнопки отмены (возврата на предидущий шаг)\n    const handlePrevStep = (e)=>{\n        e.preventDefault();\n        setStep(prevState => prevState - 1);\n    }\n\n    //прослушивание финальной кнопки для отправки данных пользователя\n    //само восставновление пароля\n    const handleSubmitNewPass = async (e) => {\n        e.preventDefault();\n        setIsLoading(true)\n        const res = await api.forgeRefreshPass(password).then(r=>{\n            setIsLoading(false);\n            history.push('/login');\n        });\n    };\n\n    //динамичная подмена данных для компонента Input в зависимости от этапа восстановления\n    const place = step === 1 ? 'Введите ваш Email ...' : step ===2? 'Введите пароль из письма на почте ...'\n        : 'Создайте новый пароль';\n    const type = step === 1 ? 'email' : step ===2? 'text': 'password';\n    const val = step === 1 ? email : step ===2? codeEmail: 'password';\n    const setVal = step === 1 ? handleEmail : handleCodeEmail ;\n\n\n    return (\n        <React.Fragment>\n            <Toaster position={'top-center'} toastOptions={\n                {style: {\n                        margin: '40px',\n                        background: '#363636',\n                        color: '#fff',\n                        zIndex: 1,\n                    }\n                }\n            }/>\n            {!isLoading &&\n            <form className={'auth'}>\n                <h4>{place}</h4>\n                <Steps step={step}/>\n                {step < 3 ?\n                    <Input value={val} setValue={setVal} type={type}/> :\n                    <>\n                        <Input type={'password'} value={password.pass} placeholder={'Введите новый пароль'}\n                               setValue={handlePass}/>\n                        <Input type={'password'} value={password.confPass} placeholder={'Повторите новый пароль'}\n                               setValue={handleConfPass}/>\n                    </>\n                }\n                <button onClick={handlePrevStep} disabled={step <= 1}\n                        className={'auth__btn'}>Prev Step\n                </button>\n                {step < 3 ?\n                    <button onClick={handleNextStep} className={'auth__btn'}>Next Step</button>\n                    :\n                    <button onClick={handleSubmitNewPass} disabled={disableFinish} className={'auth__btn'}>Finish</button>\n                }\n            </form>\n            }\n        </React.Fragment>\n    );\n}"]},"metadata":{},"sourceType":"module"}