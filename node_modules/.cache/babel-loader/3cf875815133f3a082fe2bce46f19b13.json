{"ast":null,"code":"import MockAdapter from \"axios-mock-adapter\";\nimport axios from \"axios\"; // {delayResponse:2000}\n\nconst mock = new MockAdapter(axios);\nconst user = {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n};\nconst users = [{\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}];\nmock.onPost('/auth/login').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REF'\n});\nmock.onPost('/auth/register').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/refresh').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REs'\n});\nmock.onGet('/users', expect.objectContaining({\n  Authorization: expect.stringMatching(/^Bearer /)\n})).reply(200, {\n  users\n});\nmock.resetHistory();\n/**\n * response на логин token & refreshToken\n */\n\nexport default class Api {\n  constructor(options = {}) {\n    this.client = options.client || axios.create();\n    this.token = options.token;\n    this.refreshToken = options.refreshToken;\n    this.refreshRequest = null;\n    this.client.interceptors.request.use(config => {\n      if (!this.token) {\n        return config;\n      }\n\n      const newConfig = { ...config\n      };\n      newConfig.headers.Authorization = `Bearer ${this.token}`;\n      return newConfig;\n    }, e => Promise.reject(e));\n    this.client.interceptors.response.use(r => r, async error => {\n      this.refreshToken = localStorage.getItem('refresh_token');\n\n      if (!this.refreshToken || error.response.status !== 401 || error.config.retry) {\n        Promise.reject(error);\n      }\n\n      if (!this.refreshRequest) {\n        this.refreshRequest = this.client.post(\"/auth/refresh\", {\n          refreshToken: this.refreshToken\n        });\n      }\n\n      const {\n        data\n      } = await this.refreshRequest;\n      this.token = data.token;\n      localStorage.setItem('refresh_token', data.refreshToken);\n      this.refreshToken = data.refreshToken;\n      const newRequest = { ...error.config,\n        retry: true\n      };\n      return this.client(newRequest);\n    });\n  }\n\n  async login({\n    login,\n    password\n  }) {\n    const res = await this.client.post(\"/auth/login\", {\n      login,\n      password\n    });\n    console.log('вызван логин ');\n    this.token = res.data.accessToken;\n    localStorage.setItem('refresh_token', res.data.refreshToken);\n    this.refreshToken = localStorage.getItem('refresh_token');\n    return res;\n  }\n\n  logout() {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('refresh_token');\n  }\n\n  async register(data = {}) {\n    return await this.client.post('/auth/register', data).then(r => r);\n  }\n\n  async getUsers() {\n    debugger;\n    const res = await this.client.get(\"/users\").then(data => data);\n    debugger;\n    return res;\n  }\n\n}","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/exampleApi/APIJWT.js"],"names":["MockAdapter","axios","mock","user","fullName","birthDay","phone","email","users","onPost","reply","accessToken","refreshToken","success","onGet","expect","objectContaining","Authorization","stringMatching","resetHistory","Api","constructor","options","client","create","token","refreshRequest","interceptors","request","use","config","newConfig","headers","e","Promise","reject","response","r","error","localStorage","getItem","status","retry","post","data","setItem","newRequest","login","password","res","console","log","logout","removeItem","register","then","getUsers","get"],"mappings":"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","sourcesContent":["import MockAdapter from \"axios-mock-adapter\";\nimport axios from \"axios\";\n\n// {delayResponse:2000}\nconst mock = new MockAdapter(axios);\nconst user = {\n    fullName:'Mr. FabiozZz Loucoster',\n    birthDay: '20/10/1989',\n    phone: '+79996569772',\n    email: 'fabiozzz.dev@gmail.com',\n}\nconst users=[\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n]\nmock.onPost('/auth/login').reply(200, {user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REF'});\nmock.onPost('/auth/register').reply(200, {success: 'Ok'});\n\nmock.onPost('/auth/refresh').reply(200,{user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REs'});\n\nmock.onGet('/users',expect.objectContaining({\n    Authorization: expect.stringMatching(/^Bearer /),\n})).reply(200, {users});\nmock.resetHistory();\n/**\n * response на логин token & refreshToken\n */\n\nexport default class Api {\n    constructor(options = {}) {\n        this.client = options.client || axios.create();\n        this.token = options.token;\n        this.refreshToken = options.refreshToken;\n        this.refreshRequest = null;\n\n        this.client.interceptors.request.use(\n            config => {\n                if (!this.token) {\n                    return config;\n                }\n                const newConfig = {\n                    ...config,\n                };\n\n                newConfig.headers.Authorization = `Bearer ${this.token}`;\n                return newConfig;\n            },\n            e => Promise.reject(e)\n        );\n\n        this.client.interceptors.response.use(\n            r => r,\n            async error => {\n                this.refreshToken = localStorage.getItem('refresh_token')\n                if (\n                    !this.refreshToken ||\n                    error.response.status !== 401 ||\n                    error.config.retry\n                ) {\n                    Promise.reject(error);\n                }\n\n                if (!this.refreshRequest) {\n                    this.refreshRequest = this.client.post(\"/auth/refresh\", {\n                        refreshToken: this.refreshToken,\n                    });\n                }\n                const { data } = await this.refreshRequest;\n                this.token = data.token;\n                localStorage.setItem('refresh_token',data.refreshToken)\n                this.refreshToken = data.refreshToken;\n                const newRequest = {\n                    ...error.config,\n                    retry: true,\n                };\n\n                return this.client(newRequest);\n            }\n        );\n    }\n\n    async login({ login, password }) {\n        const res = await this.client.post(\"/auth/login\", { login, password });\n        console.log('вызван логин ')\n        this.token = res.data.accessToken;\n        localStorage.setItem('refresh_token',res.data.refreshToken)\n        this.refreshToken = localStorage.getItem('refresh_token');\n        return res\n    }\n\n    logout() {\n        this.token = null;\n        this.refreshToken = null;\n        localStorage.removeItem('refresh_token')\n    }\n\n    async register(data={}) {\n        return await this.client.post('/auth/register', data).then(r => r);\n    }\n\n    async getUsers() {\n        debugger;\n        const res = await this.client.get(\"/users\").then((data ) => data);\n        debugger\n        return res\n    }\n}"]},"metadata":{},"sourceType":"module"}