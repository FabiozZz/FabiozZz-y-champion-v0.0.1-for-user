{"ast":null,"code":"import MockAdapter from \"axios-mock-adapter\";\nconst mock = new MockAdapter(axios);\nconst user = {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n};\nconst users = [{\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}];\nmock.onPost('/auth/login').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REF'\n});\nmock.onPost('/auth/register').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/refresh').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REs'\n});\nmock.onGet('/users').reply(200, {\n  users\n});\nmock.resetHistory();\nexport const login = async data => {\n  const res = await axios.post(\"/auth/login\", data);\n  console.log('вызван логин');\n  console.log('после логина получен токен', await res.data.accessToken);\n  localStorage.setItem('refresh_token', await res.data.refreshToken);\n  return res;\n};\nexport const logout = () => {\n  localStorage.removeItem('refresh_token');\n};\nexport const register = async data => {\n  return await axios.post('/auth/register', data);\n};\nexport const getUsers = async token => {\n  console.log(token);\n  return await axios.get(\"/users\", {\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  }).then(data => data);\n};","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/actions/userActions.js"],"names":["MockAdapter","mock","axios","user","fullName","birthDay","phone","email","users","onPost","reply","accessToken","refreshToken","success","onGet","resetHistory","login","data","res","post","console","log","localStorage","setItem","logout","removeItem","register","getUsers","token","get","headers","Authorization","then"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AAEA,MAAMC,IAAI,GAAG,IAAID,WAAJ,CAAgBE,KAAhB,CAAb;AACA,MAAMC,IAAI,GAAG;AACTC,EAAAA,QAAQ,EAAC,wBADA;AAETC,EAAAA,QAAQ,EAAE,YAFD;AAGTC,EAAAA,KAAK,EAAE,cAHE;AAITC,EAAAA,KAAK,EAAE;AAJE,CAAb;AAMA,MAAMC,KAAK,GAAC,CACR;AACIJ,EAAAA,QAAQ,EAAC,wBADb;AAEIC,EAAAA,QAAQ,EAAE,YAFd;AAGIC,EAAAA,KAAK,EAAE,cAHX;AAIIC,EAAAA,KAAK,EAAE;AAJX,CADQ,EAOR;AACIH,EAAAA,QAAQ,EAAC,wBADb;AAEIC,EAAAA,QAAQ,EAAE,YAFd;AAGIC,EAAAA,KAAK,EAAE,cAHX;AAIIC,EAAAA,KAAK,EAAE;AAJX,CAPQ,EAaR;AACIH,EAAAA,QAAQ,EAAC,wBADb;AAEIC,EAAAA,QAAQ,EAAE,YAFd;AAGIC,EAAAA,KAAK,EAAE,cAHX;AAIIC,EAAAA,KAAK,EAAE;AAJX,CAbQ,EAmBR;AACIH,EAAAA,QAAQ,EAAC,wBADb;AAEIC,EAAAA,QAAQ,EAAE,YAFd;AAGIC,EAAAA,KAAK,EAAE,cAHX;AAIIC,EAAAA,KAAK,EAAE;AAJX,CAnBQ,CAAZ;AA0BAN,IAAI,CAACQ,MAAL,CAAY,aAAZ,EAA2BC,KAA3B,CAAiC,GAAjC,EAAsC;AAACP,EAAAA,IAAD;AAAMQ,EAAAA,WAAW,EAAE,WAAnB;AAA+BC,EAAAA,YAAY,EAAC;AAA5C,CAAtC;AACAX,IAAI,CAACQ,MAAL,CAAY,gBAAZ,EAA8BC,KAA9B,CAAoC,GAApC,EAAyC;AAACG,EAAAA,OAAO,EAAE;AAAV,CAAzC;AAEAZ,IAAI,CAACQ,MAAL,CAAY,eAAZ,EAA6BC,KAA7B,CAAmC,GAAnC,EAAuC;AAACP,EAAAA,IAAD;AAAMQ,EAAAA,WAAW,EAAE,WAAnB;AAA+BC,EAAAA,YAAY,EAAC;AAA5C,CAAvC;AAEAX,IAAI,CAACa,KAAL,CAAW,QAAX,EAAqBJ,KAArB,CAA2B,GAA3B,EAAgC;AAACF,EAAAA;AAAD,CAAhC;AACAP,IAAI,CAACc,YAAL;AAGA,OAAO,MAAMC,KAAK,GAAG,MAAOC,IAAP,IAAe;AAChC,QAAMC,GAAG,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CAAW,aAAX,EAA0BF,IAA1B,CAAlB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0C,MAAMH,GAAG,CAACD,IAAJ,CAASN,WAAzD;AACAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAqC,MAAML,GAAG,CAACD,IAAJ,CAASL,YAApD;AACA,SAAOM,GAAP;AACH,CANM;AAQP,OAAO,MAAMM,MAAM,GAAE,MAAK;AACtBF,EAAAA,YAAY,CAACG,UAAb,CAAwB,eAAxB;AACH,CAFM;AAIP,OAAO,MAAMC,QAAQ,GAAG,MAAOT,IAAP,IAAe;AACnC,SAAO,MAAMf,KAAK,CAACiB,IAAN,CAAW,gBAAX,EAA6BF,IAA7B,CAAb;AACH,CAFM;AAIP,OAAO,MAAMU,QAAQ,GAAG,MAAOC,KAAP,IAAgB;AACpCR,EAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,SAAO,MAAM1B,KAAK,CAAC2B,GAAN,CAAU,QAAV,EAAmB;AAACC,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAWH;AAA3B;AAAV,GAAnB,EAAiEI,IAAjE,CAAuEf,IAAD,IAAUA,IAAhF,CAAb;AACH,CAHM","sourcesContent":["import MockAdapter from \"axios-mock-adapter\";\n\nconst mock = new MockAdapter(axios);\nconst user = {\n    fullName:'Mr. FabiozZz Loucoster',\n    birthDay: '20/10/1989',\n    phone: '+79996569772',\n    email: 'fabiozzz.dev@gmail.com',\n}\nconst users=[\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n]\nmock.onPost('/auth/login').reply(200, {user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REF'});\nmock.onPost('/auth/register').reply(200, {success: 'Ok'});\n\nmock.onPost('/auth/refresh').reply(200,{user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REs'});\n\nmock.onGet('/users').reply(200, {users});\nmock.resetHistory();\n\n\nexport const login = async (data)=> {\n    const res = await axios.post(\"/auth/login\", data);\n    console.log('вызван логин');\n    console.log('после логина получен токен', await res.data.accessToken);\n    localStorage.setItem('refresh_token',await res.data.refreshToken)\n    return res\n}\n\nexport const logout =()=> {\n    localStorage.removeItem('refresh_token')\n}\n\nexport const register = async (data)=> {\n    return await axios.post('/auth/register', data)\n}\n\nexport const getUsers = async (token)=> {\n    console.log(token)\n    return await axios.get(\"/users\",{headers: {Authorization: 'Bearer '+ token}}).then((data) => data)\n}"]},"metadata":{},"sourceType":"module"}