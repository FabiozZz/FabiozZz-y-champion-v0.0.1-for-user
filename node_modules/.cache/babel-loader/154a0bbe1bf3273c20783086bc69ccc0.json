{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nconst mock = new MockAdapter(axios, {\n  delayResponse: 3000\n});\nconst user = {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n};\nmock.onPost('/auth/login').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC'\n});\nmock.onGet('/auth/refresh').reply(200, {\n  user\n});\n/**\n * response на логин token & refreshToken\n */\n\nexport default class APIJWT {\n  constructor(options = {}) {\n    this.client = axios.create(); // this.client.interceptors.request.use(config=>{\n    //     if (!localStorage.getItem('token')) {\n    //         return config\n    //     }\n    //\n    //     const newConfig ={\n    //         headers:{},\n    //         ...config,\n    //     }\n    //     newConfig.headers.Authorization = `Bearer ${localStorage.getItem('token')}`\n    //     return newConfig\n    //\n    // },error => Promise.reject(error))\n  }\n\n  async login({\n    login,\n    password\n  }) {\n    return await this.client.post('/auth/login', {\n      login,\n      password\n    }).then(res => {\n      console.log(res);\n      localStorage.setItem('token', res.data.accessToken);\n      return res.data.user;\n    });\n  }\n\n  async getProtected() {\n    return await this.client.get('/auth/refresh').then(res => {\n      return res.user;\n    });\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  getUsers() {\n    return this.client.get('/users').then(({\n      data\n    }) => data);\n  }\n\n}","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/exampleApi/APIJWT.js"],"names":["axios","MockAdapter","mock","delayResponse","user","fullName","birthDay","phone","email","onPost","reply","accessToken","onGet","APIJWT","constructor","options","client","create","login","password","post","then","res","console","log","localStorage","setItem","data","getProtected","get","logout","removeItem","getUsers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA,MAAMC,IAAI,GAAG,IAAID,WAAJ,CAAgBD,KAAhB,EAAsB;AAACG,EAAAA,aAAa,EAAC;AAAf,CAAtB,CAAb;AACA,MAAMC,IAAI,GAAG;AACTC,EAAAA,QAAQ,EAAC,wBADA;AAETC,EAAAA,QAAQ,EAAE,YAFD;AAGTC,EAAAA,KAAK,EAAE,cAHE;AAITC,EAAAA,KAAK,EAAE;AAJE,CAAb;AAMAN,IAAI,CAACO,MAAL,CAAY,aAAZ,EAA2BC,KAA3B,CAAiC,GAAjC,EAAsC;AAACN,EAAAA,IAAD;AAAMO,EAAAA,WAAW,EAAE;AAAnB,CAAtC;AACAT,IAAI,CAACU,KAAL,CAAW,eAAX,EAA4BF,KAA5B,CAAkC,GAAlC,EAAuC;AAACN,EAAAA;AAAD,CAAvC;AACA;AACA;AACA;;AAGA,eAAgB,MAAMS,MAAN,CAAa;AACzBC,EAAAA,WAAW,CAACC,OAAO,GAAC,EAAT,EAAa;AACpB,SAAKC,MAAL,GAAchB,KAAK,CAACiB,MAAN,EAAd,CADoB,CAGpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH;;AAEU,QAALC,KAAK,CAAC;AAACA,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAD,EAAmB;AAC1B,WAAQ,MAAM,KAAKH,MAAL,CAAYI,IAAZ,CAAiB,aAAjB,EAA+B;AAACF,MAAAA,KAAD;AAAOC,MAAAA;AAAP,KAA/B,EAAiDE,IAAjD,CAAsDC,GAAG,IAAE;AACrEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,GAAG,CAACK,IAAJ,CAAShB,WAAvC;AACA,aAAOW,GAAG,CAACK,IAAJ,CAASvB,IAAhB;AACH,KAJa,CAAd;AAKH;;AAEiB,QAAZwB,YAAY,GAAG;AACjB,WAAO,MAAM,KAAKZ,MAAL,CAAYa,GAAZ,CAAgB,eAAhB,EAAiCR,IAAjC,CAAsCC,GAAG,IAAE;AACpD,aAAOA,GAAG,CAAClB,IAAX;AACH,KAFY,CAAb;AAGH;;AACD0B,EAAAA,MAAM,GAAG;AACLL,IAAAA,YAAY,CAACM,UAAb,CAAwB,OAAxB;AACH;;AAEDC,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKhB,MAAL,CAAYa,GAAZ,CAAgB,QAAhB,EAA0BR,IAA1B,CAA+B,CAAC;AAACM,MAAAA;AAAD,KAAD,KAAYA,IAA3C,CAAP;AACH;;AAvCwB","sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\n\nconst mock = new MockAdapter(axios,{delayResponse:3000});\nconst user = {\n    fullName:'Mr. FabiozZz Loucoster',\n    birthDay: '20/10/1989',\n    phone: '+79996569772',\n    email: 'fabiozzz.dev@gmail.com',\n}\nmock.onPost('/auth/login').reply(200, {user,accessToken: 'TOKEN_ACC'});\nmock.onGet('/auth/refresh').reply(200, {user});\n/**\n * response на логин token & refreshToken\n */\n\n\nexport default  class APIJWT {\n    constructor(options={}) {\n        this.client = axios.create();\n\n        // this.client.interceptors.request.use(config=>{\n        //     if (!localStorage.getItem('token')) {\n        //         return config\n        //     }\n        //\n        //     const newConfig ={\n        //         headers:{},\n        //         ...config,\n        //     }\n        //     newConfig.headers.Authorization = `Bearer ${localStorage.getItem('token')}`\n        //     return newConfig\n        //\n        // },error => Promise.reject(error))\n\n    }\n\n    async login({login,password}) {\n        return  await this.client.post('/auth/login',{login,password}).then(res=>{\n            console.log(res)\n            localStorage.setItem('token', res.data.accessToken);\n            return res.data.user\n        })\n    }\n\n    async getProtected() {\n        return await this.client.get('/auth/refresh').then(res=>{\n            return res.user;\n        })\n    }\n    logout() {\n        localStorage.removeItem('token');\n    }\n\n    getUsers() {\n        return this.client.get('/users').then(({data}) => data);\n    }\n}"]},"metadata":{},"sourceType":"module"}