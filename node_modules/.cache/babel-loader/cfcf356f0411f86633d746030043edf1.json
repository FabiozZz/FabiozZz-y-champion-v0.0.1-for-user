{"ast":null,"code":"import MockAdapter from \"axios-mock-adapter\";\nimport axios from \"axios\"; // {delayResponse:2000}\n\nconst mock = new MockAdapter(axios);\nconst user = {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n};\nconst users = [{\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}];\nmock.onPost('/auth/login').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REF'\n});\nmock.onPost('/auth/register').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/refresh').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REs'\n});\nmock.onGet('/users').reply(200, {\n  users\n});\nmock.resetHistory();\n/**\n * response на логин token & refreshToken\n */\n\nexport default class Api {\n  constructor(options = {}) {\n    this.client = options.client || axios.create(); // this.refreshRequest = null;\n    //\n    // this.client.interceptors.request.use(\n    //     config => {\n    //         if (!this.token) {\n    //             return config;\n    //         }\n    //         const newConfig = {\n    //             ...config,\n    //         };\n    //\n    //         newConfig.headers.['Authorization'] = `Bearer ${this.token}`;\n    //         return newConfig;\n    //     },\n    //     e => Promise.reject(e)\n    // );\n    //\n    // this.client.interceptors.response.use(\n    //     r => r,\n    //     async error => {\n    //         this.refreshToken = localStorage.getItem('refresh_token')\n    //         if (\n    //             !this.refreshToken ||\n    //             error.response.status !== 401 ||\n    //             error.config.retry\n    //         ) {\n    //             await Promise.reject(error);\n    //         }\n    //\n    //         if (!this.refreshRequest) {\n    //             this.refreshRequest = this.client.post(\"/auth/refresh\", {\n    //                 refreshToken: this.refreshToken,\n    //             });\n    //         }\n    //         const { data } = await this.refreshRequest;\n    //         this.token = data.token;\n    //         localStorage.setItem('refresh_token',data.refreshToken)\n    //         this.refreshToken = data.refreshToken;\n    //         const newRequest = {\n    //             ...error.config,\n    //             retry: true,\n    //         };\n    //\n    //         return this.client(newRequest);\n    //     }\n    // )\n  }\n\n  getToken() {\n    console.log(this._token);\n    return this._token;\n  }\n\n  async login({\n    login,\n    password\n  }) {\n    const res = await this.client.post(\"/auth/login\", {\n      login,\n      password\n    }).then(res => res);\n    console.log('вызван логин ');\n    this._token = await res.data.accessToken;\n    localStorage.setItem('refresh_token', await res.data.refreshToken);\n    this._refreshToken = localStorage.getItem('refresh_token');\n    return res;\n  }\n\n  logout() {\n    this._token = null;\n    this._refreshToken = null;\n    localStorage.removeItem('refresh_token');\n  }\n\n  async register(data = {}) {\n    return await this.client.post('/auth/register', data).then(r => r);\n  }\n\n  async getUsers() {\n    const token = this.getToken();\n    return await this.client.get(\"/users\", {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(data => data);\n  }\n\n}","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/exampleApi/APIJWT.js"],"names":["MockAdapter","axios","mock","user","fullName","birthDay","phone","email","users","onPost","reply","accessToken","refreshToken","success","onGet","resetHistory","Api","constructor","options","client","create","getToken","console","log","_token","login","password","res","post","then","data","localStorage","setItem","_refreshToken","getItem","logout","removeItem","register","r","getUsers","token","get","headers","Authorization"],"mappings":"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","sourcesContent":["import MockAdapter from \"axios-mock-adapter\";\nimport axios from \"axios\";\n\n// {delayResponse:2000}\nconst mock = new MockAdapter(axios);\nconst user = {\n    fullName:'Mr. FabiozZz Loucoster',\n    birthDay: '20/10/1989',\n    phone: '+79996569772',\n    email: 'fabiozzz.dev@gmail.com',\n}\nconst users=[\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        fullName:'Mr. FabiozZz Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n]\nmock.onPost('/auth/login').reply(200, {user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REF'});\nmock.onPost('/auth/register').reply(200, {success: 'Ok'});\n\nmock.onPost('/auth/refresh').reply(200,{user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REs'});\n\nmock.onGet('/users').reply(200, {users});\nmock.resetHistory();\n\n/**\n * response на логин token & refreshToken\n */\n\nexport default class Api {\n    token;\n    refreshToken;\n    constructor(options = {}) {\n        this.client = options.client || axios.create();\n        // this.refreshRequest = null;\n        //\n        // this.client.interceptors.request.use(\n        //     config => {\n        //         if (!this.token) {\n        //             return config;\n        //         }\n        //         const newConfig = {\n        //             ...config,\n        //         };\n        //\n        //         newConfig.headers.['Authorization'] = `Bearer ${this.token}`;\n        //         return newConfig;\n        //     },\n        //     e => Promise.reject(e)\n        // );\n        //\n        // this.client.interceptors.response.use(\n        //     r => r,\n        //     async error => {\n        //         this.refreshToken = localStorage.getItem('refresh_token')\n        //         if (\n        //             !this.refreshToken ||\n        //             error.response.status !== 401 ||\n        //             error.config.retry\n        //         ) {\n        //             await Promise.reject(error);\n        //         }\n        //\n        //         if (!this.refreshRequest) {\n        //             this.refreshRequest = this.client.post(\"/auth/refresh\", {\n        //                 refreshToken: this.refreshToken,\n        //             });\n        //         }\n        //         const { data } = await this.refreshRequest;\n        //         this.token = data.token;\n        //         localStorage.setItem('refresh_token',data.refreshToken)\n        //         this.refreshToken = data.refreshToken;\n        //         const newRequest = {\n        //             ...error.config,\n        //             retry: true,\n        //         };\n        //\n        //         return this.client(newRequest);\n        //     }\n        // )\n    }\n\n    getToken() {\n        console.log(this._token)\n        return this._token;\n    }\n\n    async login({ login, password }) {\n        const res = await this.client.post(\"/auth/login\", { login, password }).then(res=>res);\n        console.log('вызван логин ')\n        this._token = await res.data.accessToken;\n        localStorage.setItem('refresh_token',await res.data.refreshToken)\n        this._refreshToken = localStorage.getItem('refresh_token');\n        return res\n    }\n\n    logout() {\n        this._token = null;\n        this._refreshToken = null;\n        localStorage.removeItem('refresh_token')\n    }\n\n    async register(data={}) {\n        return await this.client.post('/auth/register', data).then(r => r);\n    }\n\n    async getUsers() {\n        const token = this.getToken();\n        return await this.client.get(\"/users\",{headers: {Authorization: 'Bearer '+ token}}).then((data) => data)\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}