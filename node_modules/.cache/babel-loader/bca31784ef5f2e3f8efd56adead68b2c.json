{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nconst mock = new MockAdapter(axios, {\n  delayResponse: 2000\n});\nconst user = {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n};\nconst users = [{\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}];\nmock.onPost('/auth/login').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REF'\n});\nmock.onPost('/auth/register').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/refresh').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC2',\n  refreshToken: 'TOKEN_REs2'\n});\nmock.onGet('/users').reply(200, {\n  users\n});\nmock.resetHistory();\n/**\n * response на логин token & refreshToken\n */\n\nclass Api {\n  constructor(options = {}) {\n    this.client = options.client || axios.create();\n    this.token = '';\n    this.refreshToken = '';\n    this.refreshRequest = null;\n    this.client.interceptors.request.use(config => {\n      if (!this.token) {\n        return config;\n      }\n\n      const newConfig = { ...config\n      };\n      newConfig.headers.Authorization = `Bearer ${this.token}`;\n      return newConfig;\n    }, e => Promise.reject(e));\n    this.client.interceptors.response.use(r => r, async error => {\n      this.refreshToken = localStorage.getItem('refresh_token');\n\n      if (!this.token || error.response.status !== 401 || error.config.retry) {\n        await Promise.reject(error);\n      }\n\n      if (!this.refreshRequest) {\n        this.refreshRequest = this.client.post(\"/auth/refresh\", {\n          refreshToken: this.refreshToken\n        });\n        console.log(this.refreshRequest);\n      }\n\n      const {\n        data\n      } = await this.refreshRequest;\n      this.token = data.accessToken;\n      localStorage.setItem('refresh_token', data.refreshToken);\n      this.refreshToken = data.refreshToken;\n      const newRequest = { ...error.config,\n        retry: true\n      };\n      return this.client(newRequest);\n    });\n  }\n\n  setToken(some) {\n    this.token = some;\n  }\n\n  getToken() {\n    return this.token;\n  }\n\n  async login({\n    login,\n    password\n  }) {\n    const res = await this.client.post(\"/auth/login\", {\n      login,\n      password\n    }).then(r => r).catch(er => Promise.reject(er));\n    console.log('вызван логин ');\n    this.setToken(await res.data.accessToken);\n    console.log('после логина получен токен', this.getToken());\n    localStorage.setItem('refresh_token', await res.data.refreshToken);\n    this.refreshToken = localStorage.getItem('refresh_token');\n    return res;\n  }\n\n  async autoLog() {\n    const refToken = localStorage.getItem('refresh_token');\n\n    if (refToken) {\n      return await this.client.post('/auth/refresh', {\n        refreshToken: refToken\n      }).then(ref => {\n        this.setToken(ref.data.accessToken);\n        localStorage.setItem('refresh_token', ref.data.refreshToken);\n        return ref.data.user;\n      });\n    }\n  }\n\n  logout() {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('refresh_token');\n  }\n\n  async register(data = {}) {\n    return await this.client.post('/auth/register', data);\n  }\n\n  async getUsers() {\n    return await this.client.get(\"/users\").then(data => data);\n  }\n\n}\n\nexport default new Api();","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/exampleApi/APIJWT.js"],"names":["axios","MockAdapter","mock","delayResponse","user","surName","name","patronymic","birthDay","phone","email","users","onPost","reply","accessToken","refreshToken","success","onGet","resetHistory","Api","constructor","options","client","create","token","refreshRequest","interceptors","request","use","config","newConfig","headers","Authorization","e","Promise","reject","response","r","error","localStorage","getItem","status","retry","post","console","log","data","setItem","newRequest","setToken","some","getToken","login","password","res","then","catch","er","autoLog","refToken","ref","logout","removeItem","register","getUsers","get"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\n\nconst mock = new MockAdapter(axios,{delayResponse:2000});\n\nconst user = {\n    surName:'Mr.',\n    name:'FabiozZz',\n    patronymic:'Loucoster',\n    birthDay: '20/10/1989',\n    phone: '+79996569772',\n    email: 'fabiozzz.dev@gmail.com',\n}\nconst users=[\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n]\nmock.onPost('/auth/login').reply(200, {user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REF'});\nmock.onPost('/auth/register').reply(200, {success: 'Ok'});\n\nmock.onPost('/auth/refresh').reply(200,{user,accessToken: 'TOKEN_ACC2',refreshToken:'TOKEN_REs2'});\n\nmock.onGet('/users').reply(200, {users});\nmock.resetHistory();\n\n/**\n * response на логин token & refreshToken\n */\n\nclass Api {\n\n    constructor(options = {}) {\n        this.client = options.client || axios.create();\n        this.token = '';\n        this.refreshToken = '';\n\n        this.refreshRequest = null;\n\n        this.client.interceptors.request.use(\n            config => {\n                if (!this.token) {\n                    return config;\n                }\n                const newConfig = {\n                    ...config,\n                };\n                newConfig.headers.Authorization = `Bearer ${this.token}`;\n                return newConfig;\n            },\n            e => Promise.reject(e)\n        );\n\n        this.client.interceptors.response.use(\n            r => r,\n            async error => {\n                this.refreshToken = localStorage.getItem('refresh_token')\n                if (\n                    !this.token ||\n                    error.response.status !== 401 ||\n                    error.config.retry\n                ) {\n                    await Promise.reject(error);\n                }\n\n                if (!this.refreshRequest) {\n                    this.refreshRequest = this.client.post(\"/auth/refresh\", {\n                        refreshToken: this.refreshToken,\n                    });\n                    console.log(this.refreshRequest)\n                }\n                const { data } = await this.refreshRequest;\n                this.token = data.accessToken;\n                localStorage.setItem('refresh_token',data.refreshToken)\n                this.refreshToken = data.refreshToken;\n                const newRequest = {\n                    ...error.config,\n                    retry: true,\n                };\n\n                return this.client(newRequest);\n            }\n        )\n    }\n\n    setToken(some) {\n        this.token = some;\n    }\n\n    getToken() {\n        return this.token;\n    }\n\n    async login({ login, password }) {\n        const res = await this.client.post(\"/auth/login\", {\n            login,\n            password\n        }).then(r => r).catch(er => Promise.reject(er));\n        console.log('вызван логин ')\n        this.setToken(await res.data.accessToken);\n        console.log('после логина получен токен', this.getToken());\n        localStorage.setItem('refresh_token',await res.data.refreshToken)\n        this.refreshToken = localStorage.getItem('refresh_token');\n        return res\n    }\n\n    async autoLog() {\n        const refToken = localStorage.getItem('refresh_token');\n        if (refToken) {\n            return await this.client.post('/auth/refresh', {refreshToken: refToken}).then(ref=> {\n                this.setToken(ref.data.accessToken);\n                localStorage.setItem('refresh_token', ref.data.refreshToken);\n                return ref.data.user\n            });\n        }\n    }\n\n    logout() {\n        this.token = null;\n        this.refreshToken = null;\n        localStorage.removeItem('refresh_token')\n    }\n\n    async register(data={}) {\n        return await this.client.post('/auth/register', data)\n    }\n\n    async getUsers() {\n        return await this.client.get(\"/users\").then((data) => data)\n    }\n}\n\nexport default new Api();\n"]},"metadata":{},"sourceType":"module"}