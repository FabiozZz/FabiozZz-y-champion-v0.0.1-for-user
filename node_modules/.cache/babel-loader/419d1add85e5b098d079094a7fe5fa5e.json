{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nconst mock = new MockAdapter(axios, {\n  delayResponse: 5000\n});\nconst user = {\n  fullName: 'Mr. FabiozZz Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n};\nmock.onGet(`${baseUrl}/protected_resource`).reply(200);\nmock.onPost(`${baseUrl}/auth/signup`).reply(200, {\n  user,\n  accessToken: 'ACCESS_TOKEN',\n  refreshToken: 'REFRESH_TOKEN'\n});\nconst baseUrl = \"http://localhost:4000/api\"; //request interceptor to add the auth token header to requests\n\naxios.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem(\"accessToken\");\n\n  if (accessToken) {\n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  }\n\n  return config;\n}, error => {\n  Promise.reject(error);\n}); //response interceptor to refresh token on receiving token expired error\n\naxios.interceptors.response.use(response => {\n  return response;\n}, function (error) {\n  const originalRequest = error.config;\n  let refreshToken = localStorage.getItem(\"refreshToken\");\n\n  if (refreshToken && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return axios.post(`${baseUrl}/auth/refresh_token`, {\n      refreshToken: refreshToken\n    }).then(res => {\n      if (res.status === 200) {\n        localStorage.setItem(\"accessToken\", res.data.accessToken);\n        console.log(\"Access token refreshed!\");\n        return axios(originalRequest);\n      }\n    });\n  }\n\n  return Promise.reject(error);\n}); //functions to make api calls\n\nconst api = {\n  signup: body => {\n    return axios.post(`${baseUrl}/auth/signup`, body);\n  },\n  login: body => {\n    return axios.post(`${baseUrl}/auth/login`, body);\n  },\n  refreshToken: body => {\n    return axios.post(`${baseUrl}/auth/refresh_token`, body);\n  },\n  logout: body => {\n    return axios.delete(`${baseUrl}/auth/logout`, body);\n  },\n  getProtected: () => {\n    return axios.get(`${baseUrl}/protected_resource`);\n  }\n};\nexport default api;","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/Api/api.js"],"names":["axios","MockAdapter","mock","delayResponse","user","fullName","birthDay","phone","email","onGet","baseUrl","reply","onPost","accessToken","refreshToken","interceptors","request","use","config","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","post","then","res","setItem","data","console","log","api","signup","body","login","logout","delete","getProtected","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA,MAAMC,IAAI,GAAG,IAAID,WAAJ,CAAgBD,KAAhB,EAAsB;AAACG,EAAAA,aAAa,EAAC;AAAf,CAAtB,CAAb;AACA,MAAMC,IAAI,GAAG;AACTC,EAAAA,QAAQ,EAAC,wBADA;AAETC,EAAAA,QAAQ,EAAE,YAFD;AAGTC,EAAAA,KAAK,EAAE,cAHE;AAITC,EAAAA,KAAK,EAAE;AAJE,CAAb;AAMAN,IAAI,CAACO,KAAL,CAAY,GAAEC,OAAQ,qBAAtB,EAA4CC,KAA5C,CAAkD,GAAlD;AACAT,IAAI,CAACU,MAAL,CAAa,GAAEF,OAAQ,cAAvB,EAAsCC,KAAtC,CAA4C,GAA5C,EAAgD;AAACP,EAAAA,IAAD;AAAMS,EAAAA,WAAW,EAAC,cAAlB;AAAiCC,EAAAA,YAAY,EAAC;AAA9C,CAAhD;AACA,MAAMJ,OAAO,GAAG,2BAAhB,C,CACA;;AACAV,KAAK,CAACe,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,QAAML,WAAW,GAAGM,YAAY,CAACC,OAAb,CAAqB,aAArB,CAApB;;AACA,MAAIP,WAAJ,EAAiB;AACbK,IAAAA,MAAM,CAACG,OAAP,CAAe,eAAf,IAAmC,UAASR,WAAY,EAAxD;AACH;;AACD,SAAOK,MAAP;AACH,CAPL,EAQKI,KAAD,IAAW;AACPC,EAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACH,CAVL,E,CAYA;;AACAtB,KAAK,CAACe,YAAN,CAAmBU,QAAnB,CAA4BR,GAA5B,CACKQ,QAAD,IAAc;AACV,SAAOA,QAAP;AACH,CAHL,EAII,UAAUH,KAAV,EAAiB;AACb,QAAMI,eAAe,GAAGJ,KAAK,CAACJ,MAA9B;AACA,MAAIJ,YAAY,GAAGK,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAnB;;AACA,MACIN,YAAY,IACZQ,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAD1B,IAEA,CAACD,eAAe,CAACE,MAHrB,EAIE;AACEF,IAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;AACA,WAAO5B,KAAK,CACP6B,IADE,CACI,GAAEnB,OAAQ,qBADd,EACoC;AAAEI,MAAAA,YAAY,EAAEA;AAAhB,KADpC,EAEFgB,IAFE,CAEIC,GAAD,IAAS;AACX,UAAIA,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB;AACpBR,QAAAA,YAAY,CAACa,OAAb,CAAqB,aAArB,EAAoCD,GAAG,CAACE,IAAJ,CAASpB,WAA7C;AACAqB,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,eAAOnC,KAAK,CAAC0B,eAAD,CAAZ;AACH;AACJ,KARE,CAAP;AASH;;AACD,SAAOH,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAxBL,E,CA0BA;;AACA,MAAMc,GAAG,GAAG;AACRC,EAAAA,MAAM,EAAGC,IAAD,IAAU;AACd,WAAOtC,KAAK,CAAC6B,IAAN,CAAY,GAAEnB,OAAQ,cAAtB,EAAqC4B,IAArC,CAAP;AACH,GAHO;AAIRC,EAAAA,KAAK,EAAGD,IAAD,IAAU;AACb,WAAOtC,KAAK,CAAC6B,IAAN,CAAY,GAAEnB,OAAQ,aAAtB,EAAoC4B,IAApC,CAAP;AACH,GANO;AAORxB,EAAAA,YAAY,EAAGwB,IAAD,IAAU;AACpB,WAAOtC,KAAK,CAAC6B,IAAN,CAAY,GAAEnB,OAAQ,qBAAtB,EAA4C4B,IAA5C,CAAP;AACH,GATO;AAURE,EAAAA,MAAM,EAAGF,IAAD,IAAU;AACd,WAAOtC,KAAK,CAACyC,MAAN,CAAc,GAAE/B,OAAQ,cAAxB,EAAuC4B,IAAvC,CAAP;AACH,GAZO;AAaRI,EAAAA,YAAY,EAAE,MAAM;AAChB,WAAO1C,KAAK,CAAC2C,GAAN,CAAW,GAAEjC,OAAQ,qBAArB,CAAP;AACH;AAfO,CAAZ;AAiBA,eAAe0B,GAAf","sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\n\nconst mock = new MockAdapter(axios,{delayResponse:5000})\nconst user = {\n    fullName:'Mr. FabiozZz Loucoster',\n    birthDay: '20/10/1989',\n    phone: '+79996569772',\n    email: 'fabiozzz.dev@gmail.com',\n}\nmock.onGet(`${baseUrl}/protected_resource`).reply(200,)\nmock.onPost(`${baseUrl}/auth/signup`).reply(200,{user,accessToken:'ACCESS_TOKEN',refreshToken:'REFRESH_TOKEN'})\nconst baseUrl = \"http://localhost:4000/api\";\n//request interceptor to add the auth token header to requests\naxios.interceptors.request.use(\n    (config) => {\n        const accessToken = localStorage.getItem(\"accessToken\");\n        if (accessToken) {\n            config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n        }\n        return config;\n    },\n    (error) => {\n        Promise.reject(error);\n    }\n);\n//response interceptor to refresh token on receiving token expired error\naxios.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    function (error) {\n        const originalRequest = error.config;\n        let refreshToken = localStorage.getItem(\"refreshToken\");\n        if (\n            refreshToken &&\n            error.response.status === 401 &&\n            !originalRequest._retry\n        ) {\n            originalRequest._retry = true;\n            return axios\n                .post(`${baseUrl}/auth/refresh_token`, { refreshToken: refreshToken })\n                .then((res) => {\n                    if (res.status === 200) {\n                        localStorage.setItem(\"accessToken\", res.data.accessToken);\n                        console.log(\"Access token refreshed!\");\n                        return axios(originalRequest);\n                    }\n                });\n        }\n        return Promise.reject(error);\n    }\n);\n//functions to make api calls\nconst api = {\n    signup: (body) => {\n        return axios.post(`${baseUrl}/auth/signup`, body);\n    },\n    login: (body) => {\n        return axios.post(`${baseUrl}/auth/login`, body);\n    },\n    refreshToken: (body) => {\n        return axios.post(`${baseUrl}/auth/refresh_token`, body);\n    },\n    logout: (body) => {\n        return axios.delete(`${baseUrl}/auth/logout`, body);\n    },\n    getProtected: () => {\n        return axios.get(`${baseUrl}/protected_resource`);\n    },\n};\nexport default api;\n"]},"metadata":{},"sourceType":"module"}