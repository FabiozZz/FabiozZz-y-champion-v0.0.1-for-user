{"ast":null,"code":"import MockAdapter from \"axios-mock-adapter\";\nimport axios from \"axios\"; // {delayResponse:2000}\n\nconst mock = new MockAdapter(axios);\n/**\n * response на логин token & refreshToken\n */\n\nexport default class Api {\n  constructor(options = {}) {\n    this.client = options.client || axios.create();\n    this.token = '';\n    this.refreshToken = ''; // this.refreshRequest = null;\n    //\n    // this.client.interceptors.request.use(\n    //     config => {\n    //         if (!this.token) {\n    //             return config;\n    //         }\n    //         const newConfig = {\n    //             ...config,\n    //         };\n    //\n    //         newConfig.headers.['Authorization'] = `Bearer ${this.token}`;\n    //         return newConfig;\n    //     },\n    //     e => Promise.reject(e)\n    // );\n    //\n    // this.client.interceptors.response.use(\n    //     r => r,\n    //     async error => {\n    //         this.refreshToken = localStorage.getItem('refresh_token')\n    //         if (\n    //             !this.refreshToken ||\n    //             error.response.status !== 401 ||\n    //             error.config.retry\n    //         ) {\n    //             await Promise.reject(error);\n    //         }\n    //\n    //         if (!this.refreshRequest) {\n    //             this.refreshRequest = this.client.post(\"/auth/refresh\", {\n    //                 refreshToken: this.refreshToken,\n    //             });\n    //         }\n    //         const { data } = await this.refreshRequest;\n    //         this.token = data.token;\n    //         localStorage.setItem('refresh_token',data.refreshToken)\n    //         this.refreshToken = data.refreshToken;\n    //         const newRequest = {\n    //             ...error.config,\n    //             retry: true,\n    //         };\n    //\n    //         return this.client(newRequest);\n    //     }\n    // )\n  }\n\n  setToken(some) {\n    this.token = some;\n  }\n\n  getToken() {\n    return this.token;\n  }\n\n  async login({\n    login,\n    password\n  }) {\n    const res = await this.client.post(\"/auth/login\", {\n      login,\n      password\n    }).then(r => r).catch(er => Promise.reject(er));\n    console.log('вызван логин ');\n    this.setToken(await res.data.accessToken);\n    console.log('после логина получен токен', this.getToken());\n    localStorage.setItem('refresh_token', await res.data.refreshToken);\n    this.refreshToken = localStorage.getItem('refresh_token');\n    return res;\n  }\n\n  logout() {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('refresh_token');\n  }\n\n  async register(data = {}) {\n    return await this.client.post('/auth/register', data);\n  }\n\n  async getUsers() {\n    console.log(this.getToken());\n    let token = this.getToken();\n    return await this.client.get(\"/users\", {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(data => data);\n  }\n\n}","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/exampleApi/APIJWT.js"],"names":["MockAdapter","axios","mock","Api","constructor","options","client","create","token","refreshToken","setToken","some","getToken","login","password","res","post","then","r","catch","er","Promise","reject","console","log","data","accessToken","localStorage","setItem","getItem","logout","removeItem","register","getUsers","get","headers","Authorization"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,IAAI,GAAG,IAAIF,WAAJ,CAAgBC,KAAhB,CAAb;AAEA;AACA;AACA;;AAEA,eAAe,MAAME,GAAN,CAAU;AAErBC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACtB,SAAKC,MAAL,GAAcD,OAAO,CAACC,MAAR,IAAkBL,KAAK,CAACM,MAAN,EAAhC;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,YAAL,GAAoB,EAApB,CAHsB,CAKtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACX,SAAKH,KAAL,GAAaG,IAAb;AACH;;AAEDC,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKJ,KAAZ;AACH;;AAEU,QAALK,KAAK,CAAC;AAAEA,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAsB;AAC7B,UAAMC,GAAG,GAAG,MAAM,KAAKT,MAAL,CAAYU,IAAZ,CAAiB,aAAjB,EAAgC;AAC9CH,MAAAA,KAD8C;AAE9CC,MAAAA;AAF8C,KAAhC,EAGfG,IAHe,CAGVC,CAAC,IAAIA,CAHK,EAGFC,KAHE,CAGIC,EAAE,IAAIC,OAAO,CAACC,MAAR,CAAeF,EAAf,CAHV,CAAlB;AAIAG,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,SAAKd,QAAL,CAAc,MAAMK,GAAG,CAACU,IAAJ,CAASC,WAA7B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0C,KAAKZ,QAAL,EAA1C;AACAe,IAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAqC,MAAMb,GAAG,CAACU,IAAJ,CAAShB,YAApD;AACA,SAAKA,YAAL,GAAoBkB,YAAY,CAACE,OAAb,CAAqB,eAArB,CAApB;AACA,WAAOd,GAAP;AACH;;AAEDe,EAAAA,MAAM,GAAG;AACL,SAAKtB,KAAL,GAAa,IAAb;AACA,SAAKC,YAAL,GAAoB,IAApB;AACAkB,IAAAA,YAAY,CAACI,UAAb,CAAwB,eAAxB;AACH;;AAEa,QAARC,QAAQ,CAACP,IAAI,GAAC,EAAN,EAAU;AACpB,WAAO,MAAM,KAAKnB,MAAL,CAAYU,IAAZ,CAAiB,gBAAjB,EAAmCS,IAAnC,CAAb;AACH;;AAEa,QAARQ,QAAQ,GAAG;AACbV,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,QAAL,EAAZ;AACA,QAAIJ,KAAK,GAAG,KAAKI,QAAL,EAAZ;AACA,WAAO,MAAM,KAAKN,MAAL,CAAY4B,GAAZ,CAAgB,QAAhB,EAAyB;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,YAAW5B;AAA3B;AAAV,KAAzB,EAAuES,IAAvE,CAA6EQ,IAAD,IAAUA,IAAtF,CAAb;AACH;;AA1FoB","sourcesContent":["import MockAdapter from \"axios-mock-adapter\";\nimport axios from \"axios\";\n\n// {delayResponse:2000}\nconst mock = new MockAdapter(axios);\n\n/**\n * response на логин token & refreshToken\n */\n\nexport default class Api {\n\n    constructor(options = {}) {\n        this.client = options.client || axios.create();\n        this.token = '';\n        this.refreshToken = '';\n\n        // this.refreshRequest = null;\n        //\n        // this.client.interceptors.request.use(\n        //     config => {\n        //         if (!this.token) {\n        //             return config;\n        //         }\n        //         const newConfig = {\n        //             ...config,\n        //         };\n        //\n        //         newConfig.headers.['Authorization'] = `Bearer ${this.token}`;\n        //         return newConfig;\n        //     },\n        //     e => Promise.reject(e)\n        // );\n        //\n        // this.client.interceptors.response.use(\n        //     r => r,\n        //     async error => {\n        //         this.refreshToken = localStorage.getItem('refresh_token')\n        //         if (\n        //             !this.refreshToken ||\n        //             error.response.status !== 401 ||\n        //             error.config.retry\n        //         ) {\n        //             await Promise.reject(error);\n        //         }\n        //\n        //         if (!this.refreshRequest) {\n        //             this.refreshRequest = this.client.post(\"/auth/refresh\", {\n        //                 refreshToken: this.refreshToken,\n        //             });\n        //         }\n        //         const { data } = await this.refreshRequest;\n        //         this.token = data.token;\n        //         localStorage.setItem('refresh_token',data.refreshToken)\n        //         this.refreshToken = data.refreshToken;\n        //         const newRequest = {\n        //             ...error.config,\n        //             retry: true,\n        //         };\n        //\n        //         return this.client(newRequest);\n        //     }\n        // )\n    }\n\n    setToken(some) {\n        this.token = some;\n    }\n\n    getToken() {\n        return this.token;\n    }\n\n    async login({ login, password }) {\n        const res = await this.client.post(\"/auth/login\", {\n            login,\n            password\n        }).then(r => r).catch(er => Promise.reject(er));\n        console.log('вызван логин ')\n        this.setToken(await res.data.accessToken);\n        console.log('после логина получен токен', this.getToken());\n        localStorage.setItem('refresh_token',await res.data.refreshToken)\n        this.refreshToken = localStorage.getItem('refresh_token');\n        return res\n    }\n\n    logout() {\n        this.token = null;\n        this.refreshToken = null;\n        localStorage.removeItem('refresh_token')\n    }\n\n    async register(data={}) {\n        return await this.client.post('/auth/register', data)\n    }\n\n    async getUsers() {\n        console.log(this.getToken());\n        let token = this.getToken();\n        return await this.client.get(\"/users\",{headers: {Authorization: 'Bearer '+ token}}).then((data) => data)\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}