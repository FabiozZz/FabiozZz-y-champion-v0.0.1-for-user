{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nconst mock = new MockAdapter(axios, {\n  delayResponse: 2000\n});\nconst user = {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n};\nconst users = [{\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}, {\n  surName: 'Mr.',\n  name: 'FabiozZz',\n  patronymic: 'Loucoster',\n  birthDay: '20/10/1989',\n  phone: '+79996569772',\n  email: 'fabiozzz.dev@gmail.com'\n}];\nmock.onPost('/auth/login').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC',\n  refreshToken: 'TOKEN_REF'\n});\nmock.onPost('/auth/register').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/forget/email').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/forget/code').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/forget/refreshPass').reply(200, {\n  success: 'Ok'\n});\nmock.onPost('/auth/refresh').reply(200, {\n  user,\n  accessToken: 'TOKEN_ACC2',\n  refreshToken: 'TOKEN_REs2'\n});\nmock.onGet('/users').reply(200, {\n  users\n});\nmock.resetHistory();\n/**\n * response на логин token & refreshToken\n */\n\nclass Api {\n  constructor(options = {}) {\n    //было axios.create()\n    this.client = axios;\n    this.token = '';\n    this.refreshToken = '';\n    this.cancelAxios = this.client.CancelToken.source();\n    this.refreshRequest = null;\n    this.client.interceptors.request.use(config => {\n      if (!this.token) {\n        return config;\n      }\n\n      const newConfig = { ...config\n      };\n      newConfig.headers.Authorization = `Bearer ${this.token}`;\n      return newConfig;\n    }, e => Promise.reject(e));\n    this.client.interceptors.response.use(r => r, async error => {\n      this.refreshToken = localStorage.getItem('refresh_token');\n\n      if (!this.token || error.response.status !== 401 || error.config.retry) {\n        await Promise.reject(error);\n      }\n\n      if (!this.refreshRequest) {\n        this.refreshRequest = this.client.post(\"/auth/refresh\", {\n          refreshToken: this.refreshToken\n        });\n        console.log(this.refreshRequest);\n      }\n\n      const {\n        data\n      } = await this.refreshRequest;\n      this.token = data.accessToken;\n      localStorage.setItem('refresh_token', data.refreshToken);\n      this.refreshToken = data.refreshToken;\n      const newRequest = { ...error.config,\n        retry: true\n      };\n      return this.client(newRequest);\n    });\n  }\n\n  setToken(some) {\n    this.token = some;\n  }\n\n  getToken() {\n    return this.token;\n  }\n  /**\n   * Вход в приложение\n   * Отправляет данные пользователя {email,password}\n   * Получает пару токенов и пользователя\n   * @param login\n   * @param password\n   * @returns {Promise<*>}\n   */\n\n\n  async login({\n    login,\n    password\n  }) {\n    const res = await this.client.post(\"/auth/login\", {\n      login,\n      password\n    }).then(r => r).catch(er => Promise.reject(er));\n    console.log('вызван логин ');\n    this.setToken(await res.data.accessToken);\n    console.log('после логина получен токен', this.getToken());\n    localStorage.setItem('refresh_token', await res.data.refreshToken);\n    this.refreshToken = localStorage.getItem('refresh_token');\n    return res;\n  }\n  /**\n   * Автовход\n   * После обновления страницы удаляется токен из приложения\n   * Используя RefreshToken из localStorage восстанавливает утерянный токен\n   * Получает новую пару токенов и пользователя\n   * @returns {Promise<AxiosResponse<any>>}\n   */\n\n\n  async autoLog() {\n    const refToken = localStorage.getItem('refresh_token');\n\n    if (refToken) {\n      return await this.client.post('/auth/refresh', {\n        refreshToken: refToken\n      }).then(ref => {\n        this.setToken(ref.data.accessToken);\n        localStorage.setItem('refresh_token', ref.data.refreshToken);\n        return ref.data.user;\n      });\n    }\n  }\n  /**\n   * Выход из приложения\n   * Удаляются все токены и стирается currentUser из Redux\n   */\n\n\n  logout() {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('refresh_token');\n  }\n  /**\n   * Регистрация пользователя\n   * Отправляет данные о пользователе из формы на сервер\n   * Получает только статус операции\n   * @param data\n   * @returns {Promise<AxiosResponse<any>>}\n   */\n\n\n  async register(data = {}) {\n    return await this.client.post('/auth/register', data);\n  }\n  /**\n   * Временный запрос на получение фиктивных пользователей\n   * создавался для проверки наличия в запросе Header:{Authorization: Bearer <someToken>}\n   * @returns {Promise<AxiosResponse<any>>}\n   */\n\n\n  async getUsers() {\n    return await this.client.get(\"/users\").then(data => data);\n  }\n  /**\n   * Восстановление пароля\n   * Ввод email для отправки письма\n   * @param email\n   * @returns {Promise<AxiosResponse<any>>}\n   */\n\n\n  async forgetEmail(email) {\n    return await this.client.post('/auth/forget/email', {\n      email\n    });\n  }\n  /**\n   * Восстановление пароля\n   * Ввод code полученновго в email\n   * @param code\n   * @returns {Promise<AxiosResponse<any>>}\n   */\n\n\n  async forgetCode(code) {\n    return await this.client.post('/auth/forget/code', {\n      code\n    });\n  }\n  /**\n   * Восстановление пароля\n   * Ввод пары даанных, \"пароль\" - \"потдверждение пароля\"\n   * @param data\n   * @returns {Promise<AxiosResponse<any>>}\n   */\n\n\n  async forgeRefreshPass(data) {\n    let source = this.client.CancelToken.source();\n    return await this.client.post('/auth/forget/refreshPass', data, {\n      cancelToken: source.token\n    });\n  }\n  /**\n   * Отмена операции запроса для axios\n   * @returns {CancelTokenSource}\n   */\n\n\n  abortAxiosCalling() {\n    return this.client.CancelToken.source();\n  }\n\n}\n\nexport default new Api();","map":{"version":3,"sources":["/home/fabiozzz/www/react/y-champion/for-user/src/exampleApi/APIJWT.js"],"names":["axios","MockAdapter","mock","delayResponse","user","surName","name","patronymic","birthDay","phone","email","users","onPost","reply","accessToken","refreshToken","success","onGet","resetHistory","Api","constructor","options","client","token","cancelAxios","CancelToken","source","refreshRequest","interceptors","request","use","config","newConfig","headers","Authorization","e","Promise","reject","response","r","error","localStorage","getItem","status","retry","post","console","log","data","setItem","newRequest","setToken","some","getToken","login","password","res","then","catch","er","autoLog","refToken","ref","logout","removeItem","register","getUsers","get","forgetEmail","forgetCode","code","forgeRefreshPass","cancelToken","abortAxiosCalling"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\n\nconst mock = new MockAdapter(axios,{delayResponse:2000});\n\nconst user = {\n    surName:'Mr.',\n    name:'FabiozZz',\n    patronymic:'Loucoster',\n    birthDay: '20/10/1989',\n    phone: '+79996569772',\n    email: 'fabiozzz.dev@gmail.com',\n}\nconst users=[\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n    {\n        surName:'Mr.',\n        name:'FabiozZz',\n        patronymic:'Loucoster',\n        birthDay: '20/10/1989',\n        phone: '+79996569772',\n        email: 'fabiozzz.dev@gmail.com',\n    },\n]\n\nmock.onPost('/auth/login').reply(200, {user,accessToken: 'TOKEN_ACC',refreshToken:'TOKEN_REF'});\nmock.onPost('/auth/register').reply(200, {success: 'Ok'});\n\nmock.onPost('/auth/forget/email').reply(200, {success: 'Ok'});\nmock.onPost('/auth/forget/code').reply(200, {success: 'Ok'});\nmock.onPost('/auth/forget/refreshPass').reply(200, {success: 'Ok'});\n\nmock.onPost('/auth/refresh').reply(200,{user,accessToken: 'TOKEN_ACC2',refreshToken:'TOKEN_REs2'});\n\nmock.onGet('/users').reply(200, {users});\nmock.resetHistory();\n\n/**\n * response на логин token & refreshToken\n */\n\nclass Api {\n\n    constructor(options = {}) {\n        //было axios.create()\n        this.client = axios;\n        this.token = '';\n        this.refreshToken = '';\n        this.cancelAxios = this.client.CancelToken.source();\n        this.refreshRequest = null;\n\n        this.client.interceptors.request.use(\n            config => {\n                if (!this.token) {\n                    return config;\n                }\n                const newConfig = {\n                    ...config,\n                };\n                newConfig.headers.Authorization = `Bearer ${this.token}`;\n                return newConfig;\n            },\n            e => Promise.reject(e)\n        );\n\n        this.client.interceptors.response.use(\n            r => r,\n            async error => {\n                this.refreshToken = localStorage.getItem('refresh_token')\n                if (\n                    !this.token ||\n                    error.response.status !== 401 ||\n                    error.config.retry\n                ) {\n                    await Promise.reject(error);\n                }\n\n                if (!this.refreshRequest) {\n                    this.refreshRequest = this.client.post(\"/auth/refresh\", {\n                        refreshToken: this.refreshToken,\n                    });\n                    console.log(this.refreshRequest)\n                }\n                const { data } = await this.refreshRequest;\n                this.token = data.accessToken;\n                localStorage.setItem('refresh_token',data.refreshToken)\n                this.refreshToken = data.refreshToken;\n                const newRequest = {\n                    ...error.config,\n                    retry: true,\n                };\n\n                return this.client(newRequest);\n            }\n        )\n    }\n\n    setToken(some) {\n        this.token = some;\n    }\n\n    getToken() {\n        return this.token;\n    }\n\n    /**\n     * Вход в приложение\n     * Отправляет данные пользователя {email,password}\n     * Получает пару токенов и пользователя\n     * @param login\n     * @param password\n     * @returns {Promise<*>}\n     */\n    async login({ login, password }) {\n        const res = await this.client.post(\"/auth/login\", {\n            login,\n            password\n        }).then(r => r).catch(er => Promise.reject(er));\n        console.log('вызван логин ')\n        this.setToken(await res.data.accessToken);\n        console.log('после логина получен токен', this.getToken());\n        localStorage.setItem('refresh_token',await res.data.refreshToken)\n        this.refreshToken = localStorage.getItem('refresh_token');\n        return res\n    }\n\n    /**\n     * Автовход\n     * После обновления страницы удаляется токен из приложения\n     * Используя RefreshToken из localStorage восстанавливает утерянный токен\n     * Получает новую пару токенов и пользователя\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    async autoLog() {\n        const refToken = localStorage.getItem('refresh_token');\n        if (refToken) {\n            return await this.client.post('/auth/refresh', {refreshToken: refToken}).then(ref=> {\n                this.setToken(ref.data.accessToken);\n                localStorage.setItem('refresh_token', ref.data.refreshToken);\n                return ref.data.user\n            });\n        }\n    }\n\n    /**\n     * Выход из приложения\n     * Удаляются все токены и стирается currentUser из Redux\n     */\n    logout() {\n        this.token = null;\n        this.refreshToken = null;\n        localStorage.removeItem('refresh_token')\n    }\n\n    /**\n     * Регистрация пользователя\n     * Отправляет данные о пользователе из формы на сервер\n     * Получает только статус операции\n     * @param data\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    async register(data={}) {\n        return await this.client.post('/auth/register', data)\n    }\n\n    /**\n     * Временный запрос на получение фиктивных пользователей\n     * создавался для проверки наличия в запросе Header:{Authorization: Bearer <someToken>}\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    async getUsers() {\n        return await this.client.get(\"/users\").then((data) => data)\n    }\n\n    /**\n     * Восстановление пароля\n     * Ввод email для отправки письма\n     * @param email\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    async forgetEmail(email) {\n        return await  this.client.post('/auth/forget/email',{email})\n    }\n\n    /**\n     * Восстановление пароля\n     * Ввод code полученновго в email\n     * @param code\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    async forgetCode(code) {\n        return await  this.client.post('/auth/forget/code',{code})\n    }\n\n    /**\n     * Восстановление пароля\n     * Ввод пары даанных, \"пароль\" - \"потдверждение пароля\"\n     * @param data\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    async forgeRefreshPass(data) {\n        let source = this.client.CancelToken.source();\n        return await  this.client.post('/auth/forget/refreshPass',data,{cancelToken: source.token})\n    }\n\n    /**\n     * Отмена операции запроса для axios\n     * @returns {CancelTokenSource}\n     */\n    abortAxiosCalling(){\n        return this.client.CancelToken.source();\n    }\n\n}\n\nexport default new Api();\n"]},"metadata":{},"sourceType":"module"}