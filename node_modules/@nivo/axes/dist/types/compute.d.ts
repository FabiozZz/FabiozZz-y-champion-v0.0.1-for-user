import { TicksSpec, AnyScale, ScaleWithBandwidth, ValueFormatter, Line } from './types';
export declare const centerScale: (scale: ScaleWithBandwidth) => (import("d3-scale").ScaleBand<any> & {
    type: "band";
}) | (import("d3-scale").ScalePoint<any> & {
    type: "point";
}) | (<T>(d: T) => number);
export declare const getScaleTicks: <Value extends string | number | Date>(scale: AnyScale, spec?: string | number | Value[] | undefined) => any[];
export declare const computeCartesianTicks: <Value extends string | number | Date>({ axis, scale, ticksPosition, tickValues, tickSize, tickPadding, tickRotation, engine, }: {
    axis: 'x' | 'y';
    scale: AnyScale;
    ticksPosition?: "before" | "after" | undefined;
    tickValues?: string | number | Value[] | undefined;
    tickSize?: number | undefined;
    tickPadding?: number | undefined;
    tickRotation?: number | undefined;
    engine?: "svg" | "canvas" | undefined;
}) => {
    ticks: {
        textX: number;
        textY: number;
        lineX: number;
        lineY: number;
        x: number;
        y: number;
        key: any;
        value: any;
    }[];
    textAlign: CanvasTextAlign;
    textBaseline: CanvasTextBaseline;
};
export declare const getFormatter: <Value extends string | number | Date>(format: string | ValueFormatter<Value> | undefined, scale: AnyScale) => ValueFormatter<Value> | undefined;
export declare const computeGridLines: <Value extends string | number | Date>({ width, height, scale, axis, values: _values, }: {
    width: number;
    height: number;
    scale: AnyScale;
    axis: 'x' | 'y';
    values?: string | number | Value[] | undefined;
}) => Line[];
//# sourceMappingURL=compute.d.ts.map