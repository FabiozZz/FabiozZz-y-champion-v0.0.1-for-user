import { SpringValues } from 'react-spring';
import { ScaleBand, ScaleLinear, ScaleOrdinal, ScalePoint, ScaleTime, ScaleSymLog, ScaleLogarithmic } from 'd3-scale';
import React from 'react';
export declare type GridValuesBuilder<T> = T extends number ? number[] : T extends string ? string[] : T extends Date ? Date[] : never;
export declare type GridValues<T extends string | number | Date> = number | GridValuesBuilder<T>;
export declare type Point = {
    x: number;
    y: number;
};
export declare type ScaleWithBandwidth = (ScaleBand<any> & {
    type: 'band';
}) | (ScalePoint<any> & {
    type: 'point';
});
export declare type AnyScale = (ScaleLinear<any, any> & {
    type: 'linear';
}) | (ScaleOrdinal<any, any> & {
    type: 'ordinal';
}) | (ScaleTime<any, any> & {
    useUTC: boolean;
    type: 'time';
}) | (ScaleSymLog<any, any> & {
    type: 'symlog';
}) | (ScaleLogarithmic<any, any> & {
    type: 'log';
}) | ScaleWithBandwidth;
export declare type TicksSpec<Value extends string | number | Date> = number | string | Value[];
export declare type AxisLegendPosition = 'start' | 'middle' | 'end';
export declare type ValueFormatter<Value extends string | number | Date> = (value: Value) => Value;
export interface AxisProp<Value extends string | number | Date> {
    ticksPosition?: 'before' | 'after';
    tickValues?: TicksSpec<Value>;
    tickSize?: number;
    tickPadding?: number;
    tickRotation?: number;
    format?: string | ValueFormatter<Value>;
    renderTick?: (props: AxisTickProps<Value>) => JSX.Element;
    legend?: React.ReactNode;
    legendPosition?: AxisLegendPosition;
    legendOffset?: number;
}
export interface CanvasAxisProp<Value extends string | number | Date> extends Omit<AxisProp<Value>, 'legend'> {
    legend?: string;
}
export interface AxisProps<Value extends number | string | Date = any> {
    axis: 'x' | 'y';
    scale: AnyScale;
    x?: number;
    y?: number;
    length: number;
    ticksPosition: 'before' | 'after';
    tickValues?: TicksSpec<Value>;
    tickSize?: number;
    tickPadding?: number;
    tickRotation?: number;
    format?: string | ValueFormatter<Value>;
    renderTick?: (props: AxisTickProps<Value>) => JSX.Element;
    legend?: React.ReactNode;
    legendPosition?: 'start' | 'middle' | 'end';
    legendOffset?: number;
    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value) => void;
    ariaHidden?: boolean;
}
export interface AxisTickProps<Value extends number | string | Date> {
    tickIndex: number;
    value: Value;
    format?: string | ValueFormatter<Value>;
    x: number;
    y: number;
    lineX: number;
    lineY: number;
    textX: number;
    textY: number;
    textBaseline: string;
    textAnchor: string;
    opacity?: number;
    rotate?: number;
    animatedProps: SpringValues<{
        opacity: number;
        textTransform: string;
        transform: string;
    }>;
    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value) => void;
}
export declare type Line = {
    key: string;
    x1: number;
    x2: number;
    y1: number;
    y2: number;
};
//# sourceMappingURL=types.d.ts.map